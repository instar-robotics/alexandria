<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<description>
	<libname>rosinput</libname>
	<functions>
		<function>
			<name>MatrixInput</name>
			<output type="MATRIX">	
			</output>	
			<inputs>
				<input  type="STRING">
					<name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>size_queue</name>
					<desc>Size of the queue</desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
				</input>
			</inputs>
			<icon>ros_input_matrix.svg</icon>
			<desc>Read MultiArray topic and load values into a Matrix</desc>
		</function>	
		<function>
			<name>ScalarInput</name>
			<output type="SCALAR"> 
			</output> 
			<inputs>
				<input  type="STRING">
					<name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>size_queue</name>
					<desc>Size of the queue</desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
				</input>
			</inputs>
			<icon>ros_input_scalar.svg</icon>
			<desc>Read Float64 topic and load values into a Scalar</desc>
		</function>	
		<function>
			<name>JoyAxes</name>
			<output type="MATRIX"> 
			</output> 
			<inputs>
				<input  type="STRING">
					<name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>size_queue</name>
					<desc>Size of the queue</desc>
				</input>
				<input  type="SCALAR_SCALAR">
					<name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
				</input>
			</inputs>
			<icon>joyaxesinput.svg</icon>
			<desc>Read sensor_msgs/Joy.axes and load value into a Matrix [Matrix dimension must be egal to the numbers of axes into the Joy message; the number of Axes depends on the joystick used]</desc>
		</function>	
		<function>
                        <name>JoyAxe</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>axe</name>
					<desc>axe is an integer value : this is the index of the axe to read</desc>
                                </input>
                        </inputs>
                        <icon>joyaxeinput.svg</icon>
			<desc>Read sensor_msgs/Joy.axes and load value associated to the axe define by "axe input" into a Scalar</desc>
                </function>
		<function>
                        <name>JoyButtons</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>joybuttonsinput.svg</icon>
			<desc>Read sensor_msgs/Joy.buttons and load value into a Matrix [Matrix dimension must be egal to the numbers of buttons into the Joy message; the number of Axes depends on the joystick used]</desc>
                </function>
                <function>
                        <name>JoyButton</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>button</name>
					<desc>button is an integer value : this is the index of the button to read</desc>
                                </input>
                        </inputs>
                        <icon>joybuttoninput.svg</icon>
			<desc>Read sensor_msgs/Joy.buttons and load value associated to the button define by "button input" into a Scalar</desc>
                </function>
		<function>
                        <name>OdoPos</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.position and load the 3 values into a Matrix [Dimension of the Matrix must be 3]</desc>
                </function>
		<function>
                        <name>OdoPosX</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.position.x and load the value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoPosY</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.position.y and load the value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoPosZ</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.position.z and load the value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoEuler</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion, convert into Euler representation (Roll, pitch, yaw) and load the 3 values into a Matrix [Dimension of the Matrix must be 3]</desc>
                </function>
		<function>
                        <name>OdoEulerRoll</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion, convert into Euler representation (Roll, pitch, yaw) and load roll value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoEulerPitch</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion, convert into Euler representation (Roll, pitch, yaw) and load pitch value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoEulerYaw</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion, convert into Euler representation (Roll, pitch, yaw) and load yaw value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoQuater</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion and load the 4 values into a Matrix [Dimension of the Matrix must be 4]</desc>
                </function>
		<function>
                        <name>OdoQuaterX</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion and load the X value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoQuaterY</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion and load the Y value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoQuaterZ</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion and load the Z value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoQuaterW</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.pose.orientation quaternion and load the W value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistLin</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.linear and load the values into a Matrix [Dimension of the Matrix must be 3]</desc>
                </function>
		<function>
                        <name>OdoTwistLinX</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.linear and load the X value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistLinY</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.linear and load the Y value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistLinZ</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.linear and load the Z value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistAng</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.angular (in Euler representation) and load the values into a Matrix [Dimension of the Matrix must be 3]</desc>
                </function>
		<function>
                        <name>OdoTwistAngRoll</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.angular (in Euler representation) and load the roll value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistAngPitch</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.angular (in Euler representation) and load the pitch value into a Scalar</desc>
                </function>
		<function>
                        <name>OdoTwistAngYaw</name>
                        <output type="SCALAR">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                        </inputs>
                        <icon>odometry.svg</icon>
			<desc>Read nav_msgs/Odometry.twist.angular (in Euler representation) and load the yaw value into a Scalar</desc>
                </function>
		<function>
                        <name>Lidar1D</name>
                        <output type="MATRIX" shape="VECT">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>range_max</name>
					<desc>Max Range [in meters] : values are projected between 0 and range_max</desc>
                                </input>
                        </inputs>
                        <icon>1d_lidar.svg</icon>
			<desc>Read sensor_msgs/LaserScan.ranges and project values into a Matric [Output must be a VECTOR ROW=1 and Cols=N]</desc>
                </function>
		<function>
                        <name>Lidar2D</name>
                        <output type="MATRIX">
                        </output>
                        <inputs>
                                <input  type="STRING">
                                        <name>topic_name</name>
					<desc>Name of the topic to which the function subscribes </desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>size_queue</name>
					<desc>Size of the queue</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>sleep</name>
					<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
                                </input>
                                <input  type="SCALAR_SCALAR">
                                        <name>range_max</name>
					<desc>Max Range [in meters] : values are projected between 0 and range_max</desc>
                                </input>
                        </inputs>
                        <icon>1d_lidar.svg</icon>
			<desc></desc>
                </function>
								<function>
									<name>Compass3D</name>
									<output type="MATRIX"> 
									</output> 
									<inputs>
										<input  type="STRING">
											<name>topic_name</name>
											<desc>Name of the topic to which the function subscribes </desc>
										</input>
										<input  type="SCALAR_SCALAR">
											<name>size_queue</name>
											<desc>Size of the queue</desc>
										</input>
										<input  type="SCALAR_SCALAR">
											<name>sleep</name>
											<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
										</input>
									</inputs>
									<icon>compass.svg</icon>
									<desc>Read sensor_msgs/Imu.orientation and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 3 values).]</desc>
							</function>
							<function>
								<name>CompassX</name>
								<output type="SCALAR"> 
								</output> 
								<inputs>
									<input  type="STRING">
										<name>topic_name</name>
										<desc>Name of the topic to which the function subscribes </desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>size_queue</name>
										<desc>Size of the queue</desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>sleep</name>
										<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
									</input>
								</inputs>
								<icon>compass.svg</icon>
								<desc>Read sensor_msgs/Imu.orientation quaternion, convert it into Euler, extract the X compass and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 1 values).]</desc>
						</function>
						<function>
							<name>CompassY</name>
							<output type="SCALAR"> 
							</output> 
							<inputs>
								<input  type="STRING">
									<name>topic_name</name>
									<desc>Name of the topic to which the function subscribes </desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>size_queue</name>
									<desc>Size of the queue</desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>sleep</name>
									<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
								</input>
							</inputs>
							<icon>compass.svg</icon>
							<desc>Read sensor_msgs/Imu.orientation quaternion, convert it into Euler, extract the Y compass and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 1 values).]</desc>
					</function>
					<function>
						<name>CompassZ</name>
						<output type="SCALAR"> 
						</output> 
						<inputs>
							<input  type="STRING">
								<name>topic_name</name>
								<desc>Name of the topic to which the function subscribes </desc>
							</input>
							<input  type="SCALAR_SCALAR">
								<name>size_queue</name>
								<desc>Size of the queue</desc>
							</input>
							<input  type="SCALAR_SCALAR">
								<name>sleep</name>
								<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
							</input>
						</inputs>
						<icon>compass.svg</icon>
						<desc>Read sensor_msgs/Imu.orientation quaternion, convert it into Euler, extract the Z compass and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 1 values).]</desc>
				</function>
							<function>
								<name>Gyroscope3D</name>
								<output type="MATRIX"> 
								</output> 
								<inputs>
									<input  type="STRING">
										<name>topic_name</name>
										<desc>Name of the topic to which the function subscribes </desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>size_queue</name>
										<desc>Size of the queue</desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>sleep</name>
										<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
									</input>
								</inputs>
								<icon>gyroscope.svg</icon>
								<desc>Read sensor_msgs/Imu.angular_velocity and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 3 values).]</desc>
						</function>
							<function>
								<name>GyroscopeX</name>
								<output type="SCALAR"> 
								</output> 
								<inputs>
									<input  type="STRING">
										<name>topic_name</name>
										<desc>Name of the topic to which the function subscribes </desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>size_queue</name>
										<desc>Size of the queue</desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>sleep</name>
										<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
									</input>
								</inputs>
								<icon>gyroscope.svg</icon>
								<desc>Read sensor_msgs/Imu.angular_velocity.x and load value into a Scalar.</desc>
						</function>
							<function>
								<name>GyroscopeY</name>
								<output type="SCALAR"> 
								</output> 
								<inputs>
									<input  type="STRING">
										<name>topic_name</name>
										<desc>Name of the topic to which the function subscribes </desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>size_queue</name>
										<desc>Size of the queue</desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>sleep</name>
										<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
									</input>
								</inputs>
								<icon>gyroscope.svg</icon>
								<desc>Read sensor_msgs/Imu.angular_velocity.y and load value into a Scalar.</desc>
						</function>
							<function>
								<name>GyroscopeZ</name>
								<output type="SCALAR"> 
								</output> 
								<inputs>
									<input  type="STRING">
										<name>topic_name</name>
										<desc>Name of the topic to which the function subscribes </desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>size_queue</name>
										<desc>Size of the queue</desc>
									</input>
									<input  type="SCALAR_SCALAR">
										<name>sleep</name>
										<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
									</input>
								</inputs>
								<icon>gyroscope.svg</icon>
								<desc>Read sensor_msgs/Imu.angular_velocity.z and load value into a Scalar.</desc>
						</function>
						<function>
							<name>Accelerometer3D</name>
							<output type="MATRIX"> 
							</output> 
							<inputs>
								<input  type="STRING">
									<name>topic_name</name>
									<desc>Name of the topic to which the function subscribes </desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>size_queue</name>
									<desc>Size of the queue</desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>sleep</name>
									<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
								</input>
							</inputs>
							<icon>accelerometer.svg</icon>
							<desc>Read sensor_msgs/Imu.linear_acceleration and load value into a Matrix [Matrix dimension must be egal to the numbers of values into the Imu message (must be 3 values).]</desc>
					</function>
						<function>
							<name>AccelerometerX</name>
							<output type="SCALAR"> 
							</output> 
							<inputs>
								<input  type="STRING">
									<name>topic_name</name>
									<desc>Name of the topic to which the function subscribes </desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>size_queue</name>
									<desc>Size of the queue</desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>sleep</name>
									<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
								</input>
							</inputs>
							<icon>accelerometer.svg</icon>
							<desc>Read sensor_msgs/Imu.linear_acceleration.x and load value into a Scalar.</desc>
					</function>
						<function>
							<name>AccelerometerY</name>
							<output type="SCALAR"> 
							</output> 
							<inputs>
								<input  type="STRING">
									<name>topic_name</name>
									<desc>Name of the topic to which the function subscribes </desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>size_queue</name>
									<desc>Size of the queue</desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>sleep</name>
									<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
								</input>
							</inputs>
							<icon>accelerometer.svg</icon>
							<desc>Read sensor_msgs/Imu.linear_acceleration.y and load value into a Scalar.</desc>
					</function>
						<function>
							<name>AccelerometerZ</name>
							<output type="SCALAR"> 
							</output> 
							<inputs>
								<input  type="STRING">
									<name>topic_name</name>
									<desc>Name of the topic to which the function subscribes </desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>size_queue</name>
									<desc>Size of the queue</desc>
								</input>
								<input  type="SCALAR_SCALAR">
									<name>sleep</name>
									<desc>sleep duration [-1 : block until receive data ; 0 non-blocking call; N > 0 : sleep during N milliseconds]</desc>
								</input>
							</inputs>
							<icon>accelerometer.svg</icon>
							<desc>Read sensor_msgs/Imu.linear_acceleration.z and load value into a Scalar.</desc>
					</function>
	</functions>
</description>
