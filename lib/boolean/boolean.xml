<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<description>
	<libname>boolean</libname>
	<functions>
		<function>
			<name>MAND</name>
			<output type="MATRIX">	
			</output>	
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
			</inputs>
			<icon>and-matrix.svg</icon>
			<desc>Term-term AND operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>	
		<function>
			<name>MSAND</name>
			<output type="MATRIX"> 
			</output> 
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>and-matrix-scalar.svg</icon>
			<desc>Term-term AND operator for matrix part. Apply AND operator between scalar part and matrix part. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>	
		<function>
			<name>SAND</name>
			<output type="SCALAR">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>and-scalar.svg</icon>
			<desc>AND operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>MOR</name>
			<output type="MATRIX">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
			</inputs>
			<icon>or-matrix.svg</icon>
			<desc>Term-term OR operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>MSOR</name>
			<output type="MATRIX">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>or-matrix-scalar.svg</icon>
			<desc>Term-term OR operator for matrix part. Apply OR operator between scalar part and matrix part. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>SOR</name>
			<output type="SCALAR">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>or-scalar.svg</icon>
			<desc>OR operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>MXOR</name>
			<output type="MATRIX">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
			</inputs>
			<icon>xor-matrix.svg</icon>
			<desc>Term-term XOR operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>MSXOR</name>
			<output type="MATRIX">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>xor-matrix-scalar.svg</icon>
			<desc>XOR operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
			<desc>Term-term XOR operator for matrix part. Apply XOR operator between scalar part and matrix part. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>SXOR</name>
			<output type="SCALAR">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>xor-scalar.svg</icon>
			<desc>XOR operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>MNOT</name>
			<output type="MATRIX">
			</output>
			<inputs>
				<input  type="SCALAR_MATRIX">
					<name>inMatrix</name>
					<desc>Input matrix</desc>
				</input>
			</inputs>
			<icon>not-matrix.svg</icon>
			<desc>NOT operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>SNOT</name>
			<output type="SCALAR">
			</output>
			<inputs>
				<input  type="SCALAR_SCALAR">
					<name>inScalar</name>
					<desc>Input scalar</desc>
				</input>
			</inputs>
			<icon>not-scalar.svg</icon>
			<desc>Term-term NOT operator. [Input lower than 0.5 : 0 logic; Input greater than 0.5 : 1 logic]</desc>
		</function>
		<function>
			<name>SFLIPFLOP</name>
			<output type="SCALAR">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>set</name>
					<desc>Input scalar to set state to 1</desc>
				</input>
				<input multiple="true" type="SCALAR_SCALAR">
					<name>reset</name>
					<desc>Input scalar to reset state back to 0</desc>
				</input>
			</inputs>
			<icon>flipflop-scalar.svg</icon>
			<desc>FLIP-FLOP logic gate (latch gate). [If set=1 AND reset=0 : output set to 1; If set=X AND reset=1 : output set to 0; If set=0 AND reset=0 : output does not change (keep previous state);]</desc>
		</function>
		<function>
			<name>MFLIPFLOP</name> 
			<output type="MATRIX">
			</output>
			<inputs>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>set</name>
					<desc>Input matrix to set state to 1</desc>
				</input>
				<input multiple="true" type="SCALAR_MATRIX">
					<name>reset</name>
					<desc>Input matrix to reset state back to 0</desc>
				</input>
			</inputs>
			<icon>flipflop-matrix.svg</icon>
			<desc>FLIP-FLOP logic gate (latch gate). [If set=1 AND reset=0 : output set to 1; If set=X AND reset=1 : output set to 0; If set=0 AND reset=0 : output does not change (keep previous state);]</desc>
		</function>
	</functions>
</description>
